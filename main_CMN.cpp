 #include 	"tt.h"	// Ekrem tt.h must be on top
 #include 	<21369.h>
 #include 	<Cdef21369.h> 
 #include 	<def21369.h>
 #define  	SRUDEBUG  // Check SRU Routings for errors.
 #include 	<SRU.h>

#if	(SOFT_V & SHARC_HW) 
 #include 	"hLMK.hpp"
 #include 	"hSR_Manager.hpp"
 #include 	"hI2S_PORTS.hpp"
 #include 	"hI2STX_LINE.hpp"	
#endif

#include 	"hRESAMPLER.hpp"
#include  	"hSR_PROC.hpp"
#include 	"hUARTBUF.hpp"
#include 	"hDSPSTRING.hpp"

#include 	"hDSP_TAB.hpp"
#include 	"hPOLY.hpp"
#include 	"hVOL_MAN.hpp"

#include 	"hDSP_MCEP.hpp"

#include 	"hPlaySession.hpp"
#include 	"hDSP_MANAGER.hpp"

 
#include 	<stdio.h>
#include 	<stdlib.h>
#include 	<time.h>
#include 	<math.h>
#include 	<string.h>
#include 	"SIM.h"

#include 	"hMODEC.hpp"

#if	(SOFT_V & SHARC_HW)
	extern	I2S_PORT		SP0RX_SPDIF; 
	extern 	I2SRX_LINE 		*In_SPDIF;		
	extern 	I2STX_LINE 		*Out1A;			
	extern	BUF_MANAGER		X[2], RB, RT;
#endif

extern 	int			I2SOUT_Ready;

extern 		char		dbgtab[DBGTAB_SIZE];

#define		RESERVE		0E+4  // 0 // 4x 1CH  50%

//int					LR_state; 
int		 				BLRAM_Ready; 
SECTION(("seg_sdram3")) 	char				dbgtab[DBGTAB_SIZE];


extern	BUF_SRC			X_SRC;

extern void	New_Playrun_Config(void);

void 	DSP_Linux(void);



SECTION(("seg_sdram2"))   int		msg_modec[22][6]={

 0x65,0x00,0x00,0x00,0x00,0x00		

,0x65,0x02,0x3B,100+70,	0x5A,0x03
,0x65,0x02,0x4B,100+70,	0x5A,0x03
,0x65,0x02,0x5B,100+60,	0x5A,0x03

,0x65,0x03,0x08,100+60,	0x5A,0x03
,0x65,0x03,0x1B,100+50,	0x5A,0x03
,0x65,0x04,0x3E,0x28,	0x5A,0x03
,0x65,0x04,0x59,0x5A,	0x5A,0x03
,0x65,0x05,0x13,0x5A,	0x5A,0x03
,0x65,0x05,0x32,0x3C,	0x5A,0x03
,0x65,0x06,0x36,0x3C,	0x5A,0x03
,0x65,0x07,0x4D,0x3C,	0x5A,0x03


,0x65,0x0B,0x41,100+40,	0x5A,0x03

//,0x65,0x0D,0x08,100+40,0x5A,0x03

//,0x65,0x0E,0x44,100+40,0x5A,0x03
//,0x65,0x11,0x2E,100+40,0x5A,0x03
//,0x65,0x12,0x32,100+40,0x5A,0x03
//,0x65,0x13,0x3C,100+40,0x5A,0x03

/*
,0x65,0x14,0x4C,100+40,0x5A,0x03


,0x65,  12, 35, 90, 90,0x03

 0x65,0x00,0x00,0x00,0x00,0x00		

,0x65,0x02,0x3B,100+70,0x5A,0x03
,0x65,0x02,0x4B,100+60,0x5A,0x03
,0x65,0x02,0x5B,100+60,0x5A,0x03

,0x65,0x03,0x08,100+50,0x5A,0x03
,0x65,0x03,0x1B,100+50,0x5A,0x03
,0x65,0x04,0x3E,0x28,0x5A,0x03
,0x65,0x04,0x59,0x5A,0x5A,0x03
,0x65,0x05,0x13,0x5A,0x5A,0x03
,0x65,0x05,0x32,0x3C,0x5A,0x03
,0x65,0x06,0x36,0x50,0x5A,0x03
,0x65,0x07,0x4D,0x3C,0x5A,0x03

,0x65,0x0B,0x41,100+50,0x5A,0x03
,0x65,  12, 35, 100, 90,0x03

,0x65,0x0D,0x08,100+50,0x5A,0x03
,0x65,0x0E,0x44,100+50,0x5A,0x03
,0x65,0x11,0x2E,100+40,0x5A,0x03
,0x65,0x12,0x32,100+40,0x5A,0x03
,0x65,0x13,0x3C,100+40,0x5A,0x03

,0x65,0x14,0x4C,100+40,0x5A,0x03
*/
};

/*
SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00	
};
*/
 
void DSP_SH(void);	 		

void	PowerOn_setup(void)
{
  	 	
	UARTBUF::Constructor();		
//	UARTBUF0Init();		
//= ONE-OFF-s

	//DSPSTRING::Apply_Default_String();	
	//DSPSTRING::Apply_Current_String(); 


   #if ( (SOFT_V == SH_DSP && xDSPMODE == xMULTISPK) || SOFT_V == SH_XOEP_PROD || SOFT_V & LINUX_HW)
	MCEP::Init();
   #endif]
	POLY::Constructor();
	FILTER::Constructor();
	RESAMPLER::Constructor();
	STAGE_PROC::Constructor();
	VOL_MAN::Constructor();

	RESAMPLER::ACTIVE 		= 	ON_STATE; //  OFF_STATE; // 
	PlaySession::WORK_CONF = (PlaySession::WORK_CONF&(DEV_MASK | RUNMODE_MASK | CHN_MASK )) | OVS_LMK_LOTHD;			
   	
	SR_PROC::SAMPLE_RATE 	= 	0;
	BLRAM_Ready = 0;
		 
}

void modec_exec(void)
{
	int k=0; 
	
	while(msg_modec[k][0]!= 0)
	{
		MODEC::Msg101(msg_modec[k]);
		++k;
	}	
}

void New_Playrun_Config(void) //main_CMN
{
   	BUF_MANAGER::BUF_MANAGER_INIT();

#if UART_TYPE == UART_OLD    	  	
  	//DSP_TAB::Stages_Config();   // Pick_Stages() - ALL stages, without Stage_Switches()       
   #if ( (SOFT_V == SH_DSP && xDSPMODE == xMULTISPK) || SOFT_V == SH_XOEP_PROD || SOFT_V & LINUX_HW)  	
    MCEP::Config();
   #endif	    
#elif  UART_TYPE == UART_NEW
    MCEP::Config();
#endif	
   
   	DSP_MANAGER::Streams_Config();	
	// DSP_TAB::Stage_Switches();
	MCEP::Stage_Switches();	
	//trace("\n1",0); 
  	RESAMPLER::Level = ZERO_RSMP_POS;  // This should go before Filter bcs it sets the Resampling level and hence size used by Filter methods				
	FILTER::Size_Vol();
  	RESAMPLER::Rsmp_Size_Vol_Delay(); 
	
  	VOL_MAN::VOL_Stages_Setup();
	modec_exec();
}

#if (SOFT_V == LINUX_HW || SOFT_V == SH_XOEP_PROD)
 void Deli_Linux_mainproc(void)
 {
 		SR_PROC::INPUT_ACTIVE = 1;  	    	
		while(!SR_PROC::SAMPLE_RATE || !PlaySession::PLAY_MODE )    //= Input SPDIF sample rate recognition, in the meantime watching out for possible UART msg
   			UARTBUF::UART_Monitor_NEW();   //If msg 0x55 recvd -> DELI_CMD::x55RX(int *msg) -> DELI_CMD::Proc_SR(msg) -> SR_PROC::Check_SR_CHG(cSR_ID) -> if (cSR_ID != SR_ID ) -> Send_EP & Send_RES & LED_Color

		New_Playrun_Config();										   		  	
//      #if (SOFT_V == SH_XOEP_PROD && IN1_ACTIVE) 	
//     	SP0RX_SPDIF.RunSPORT(); 
//      #endif   						
      
		while(SR_PROC::SAMPLE_RATE >0 && PlaySession::PLAY_MODE)
		{
		  // Audio processing
		   #if (SOFT_V == SH_XOEP_PROD)
		   	DSP_SH();	  
		   #else	
   			DSP_Linux();
   		   #endif	
   		  // Check audio input & SR changes
      		UARTBUF::UART_Monitor_NEW();	   	      	
			if (SR_PROC::SR_CHG && SR_PROC::SAMPLE_RATE >0)
			{
				New_Playrun_Config(); //Deli_Linux_mainproc			
				//DSPSTRING::Print_DSPstring_Modes();
				SR_PROC::SR_CHG = 0;
			}          
		}				
		//Print_Debug(sprintf(dbgtab, "\nNEW"), NOTIME);
	
 }
#endif

/*
 	SECTION(("seg_sdram2"))   int		msg_modec[15][6]={
 		 0x65,0x04,0x00,0x46,0x5A,0x03
		,0x65,0x04,0x5D,0x46,0x5A,0x03
		,0x65,0x06,0x01,0x46,0x5A,0x03
		,0x65,0x08,0x05,0x46,0x5A,0x03
		,0x65,0x0C,0x19,0x46,0x5A,0x03
		,0x65,0x0D,0x55,0x46,0x5A,0x03
		,0x65,0x0F,0x0D,0x50,0x5A,0x03
		,0x65,0x0F,0x41,0x46,0x5A,0x03
		,0x65,0x10,0x32,0x3C,0x5A,0x03
 	}; 
*/
/*
//  Mody Jezewskiego, zestaw -J- 12-LIS-22
 	SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00
,0x65,0x02,0x1E,0x64,0x5A,0x03
,0x65,0x04,0x1F,0x64,0x5A,0x03
,0x65,0x04,0x35,0x64,0x5A,0x03
,0x65,0x04,0x47,0x50,0x5A,0x03
,0x65,0x06,0x1B,0x64,0x5A,0x03
,0x65,0x06,0x29,0x64,0x5A,0x03
,0x65,0x09,0x1C,0x64,0x5A,0x03
,0x65,0x06,0x52,0x46,0x5A,0x03
,0x65,0x07,0x4A,0x64,0x5A,0x03
,0x65,0x0A,0x04,0x3C,0x5A,0x03
,0x65,0x0A,0x34,0x3C,0x5A,0x03
,0x65,0x0B,0x0A,0x28,0x5A,0x03
,0x65,0x0B,0x59,0x28,0x5A,0x03
,0x65,0x09,0x4C,0x46,0x5A,0x03
 	}; 
*/
//  Mody Jezewskiego, zestaw -N- 13-LIS-22 z redukcja modu 55,5JHz z teorii

/*
SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00
,0x65,0x02,0x1E,0x50,0x5A,0x03
,0x65,0x04,0x1F,0x50,0x5A,0x03
,0x65,0x04,0x35,0x50,0x5A,0x03
,0x65,0x04,0x47,0x50,0x5A,0x03
,0x65,0x06,0x00,0x64,0x5A,0x03
,0x65,0x06,0x29,0x64,0x5A,0x03
,0x65,0x06,0x52,0x50,0x5A,0x03
,0x65,0x07,0x4A,0x50,0x5A,0x03
,0x65,0x0A,0x04,0x46,0x5A,0x03
,0x65,0x0A,0x34,0x46,0x5A,0x03
,0x65,0x0B,0x59,0x46,0x5A,0x03
,0x65,0x09,0x25,0x46,0x5A,0x03
,0x65,0x09,0x4C,0x50,0x5A,0x03
,0x65,0x05,0x37,0x64,0x5A,0x03	 	
 	}; 
*/

/* 	
SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00	
,0x65,0x04,0x59,0x46,0x5A,0x03
,0x65,0x05,0x13,0x46,0x5A,0x03
,0x65,0x05,0x32,0x3C,0x5A,0x03
,0x65,0x05,0x53,0x28,0x5A,0x03
,0x65,0x06,0x11,0x32,0x5A,0x03
,0x65,0x06,0x36,0x64,0x5A,0x03
,0x65,0x07,0x4E,0x32,0x5A,0x03
 	}; 
*/

/* 	
SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00	
,0x65,0x04,0x59,0x46,0x5A,0x03
,0x65,0x05,0x13,0x46,0x5A,0x03
,0x65,0x05,0x32,0x3C,0x5A,0x03
,0x65,0x05,0x53,0x32,0x5A,0x03
,0x65,0x06,0x11,0x32,0x5A,0x03
,0x65,0x06,0x36,0x64,0x5A,0x03
,0x65,0x07,0x4E,0x32,0x5A,0x03
,0x65,0x07,0x7A,0x50,0x5A,0x03
,0x65,0x0C,0x6F,0x46,0x5A,0x03

,0x65,0x04,0x6A,0x3C+100,0x5A,0x03
,0x65,0x04,0x51,0x46+100,0x5A,0x03

}; 
*/
 	
/*
SECTION(("seg_sdram2"))   int		msg_modec[20][6]={
 0x65,0x00,0x00,0x00,0x00,0x00		

   
,0x65,0x12,0x32, 100+00,	90,0x03
,0x65,0x0D,0x08, 100+80,	90,0x03
,0x65,0x0B,0x41, 100+80,	90,0x03
,0x65,0x06,0x5D, 100+70,	90,0x03
,0x65,0x04,0x25, 100+70,	90,0x03
*/

/*
, 0x65,0x04,0x0C, 100+40, 	90, 0x03
, 0x65,0x03,0x59, 100+40, 	90, 0x03
, 0x65,0x03,0x43, 100+40, 	90, 0x03
*/

/*
, 0x65,0x03,0x2E, 100+50, 	90, 0x03
, 0x65,0x03,0x18, 100+50, 	90, 0x03
, 0x65,0x03,0x09, 100+50, 	90, 0x03
, 0x65,0x02,0x5B, 100+50, 90, 0x03
*/


/*
,0x65,0x05,0x05, 50,		90,0x03
,0x65,0x06,0x3A, 40,		90,0x03

,0x65,0x07,0x43, 4,			90,0x03


}; 
*/
